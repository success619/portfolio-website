{"mappings":"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","sources":["node_modules/@emailjs/browser/es/models/EmailJSResponseStatus.js","node_modules/@emailjs/browser/es/utils/createWebStorage/createWebStorage.js","node_modules/@emailjs/browser/es/store/store.js","node_modules/@emailjs/browser/es/utils/buildOptions/buildOptions.js","node_modules/@emailjs/browser/es/api/sendPost.js","node_modules/@emailjs/browser/es/utils/validateParams/validateParams.js","node_modules/@emailjs/browser/es/utils/validateTemplateParams/validateTemplateParams.js","node_modules/@emailjs/browser/es/utils/isHeadless/isHeadless.js","node_modules/@emailjs/browser/es/errors/headlessError/headlessError.js","node_modules/@emailjs/browser/es/utils/validateBlockListParams/validateBlockListParams.js","node_modules/@emailjs/browser/es/utils/isBlockedValueInParams/isBlockedValueInParams.js","node_modules/@emailjs/browser/es/errors/blockedEmailError/blockedEmailError.js","node_modules/@emailjs/browser/es/utils/validateLimitRateParams/validateLimitRateParams.js","node_modules/@emailjs/browser/es/utils/isLimitRateHit/isLimitRateHit.js","node_modules/@emailjs/browser/es/errors/limitRateError/limitRateError.js","node_modules/@emailjs/browser/es/utils/validateForm/validateForm.js","node_modules/@emailjs/browser/es/index.js","node_modules/@emailjs/browser/es/methods/init/init.js","node_modules/@emailjs/browser/es/methods/send/send.js","node_modules/@emailjs/browser/es/methods/sendForm/sendForm.js","src/script.js"],"sourcesContent":["export class EmailJSResponseStatus {\n    constructor(_status = 0, _text = 'Network Error') {\n        this.status = _status;\n        this.text = _text;\n    }\n}\n","export const createWebStorage = () => {\n    if (typeof localStorage === 'undefined')\n        return;\n    return {\n        get: (key) => Promise.resolve(localStorage.getItem(key)),\n        set: (key, value) => Promise.resolve(localStorage.setItem(key, value)),\n        remove: (key) => Promise.resolve(localStorage.removeItem(key)),\n    };\n};\n","import { createWebStorage } from '../utils/createWebStorage/createWebStorage';\nexport const store = {\n    origin: 'https://api.emailjs.com',\n    blockHeadless: false,\n    storageProvider: createWebStorage(),\n};\n","export const buildOptions = (options) => {\n    if (!options)\n        return {};\n    // support compatibility with SDK v3\n    if (typeof options === 'string') {\n        return {\n            publicKey: options,\n        };\n    }\n    // eslint-disable-next-line @typescript-eslint/no-base-to-string\n    if (options.toString() === '[object Object]') {\n        return options;\n    }\n    return {};\n};\n","import { EmailJSResponseStatus } from '../models/EmailJSResponseStatus';\nimport { store } from '../store/store';\nexport const sendPost = async (url, data, headers = {}) => {\n    const response = await fetch(store.origin + url, {\n        method: 'POST',\n        headers,\n        body: data,\n    });\n    const message = await response.text();\n    const responseStatus = new EmailJSResponseStatus(response.status, message);\n    if (response.ok) {\n        return responseStatus;\n    }\n    throw responseStatus;\n};\n","export const validateParams = (publicKey, serviceID, templateID) => {\n    if (!publicKey || typeof publicKey !== 'string') {\n        throw 'The public key is required. Visit https://dashboard.emailjs.com/admin/account';\n    }\n    if (!serviceID || typeof serviceID !== 'string') {\n        throw 'The service ID is required. Visit https://dashboard.emailjs.com/admin';\n    }\n    if (!templateID || typeof templateID !== 'string') {\n        throw 'The template ID is required. Visit https://dashboard.emailjs.com/admin/templates';\n    }\n};\n","export const validateTemplateParams = (templateParams) => {\n    // eslint-disable-next-line @typescript-eslint/no-base-to-string\n    if (templateParams && templateParams.toString() !== '[object Object]') {\n        throw 'The template params have to be the object. Visit https://www.emailjs.com/docs/sdk/send/';\n    }\n};\n","export const isHeadless = (navigator) => {\n    return navigator.webdriver || !navigator.languages || navigator.languages.length === 0;\n};\n","import { EmailJSResponseStatus } from '../../models/EmailJSResponseStatus';\nexport const headlessError = () => {\n    return new EmailJSResponseStatus(451, 'Unavailable For Headless Browser');\n};\n","export const validateBlockListParams = (list, watchVariable) => {\n    if (!Array.isArray(list)) {\n        throw 'The BlockList list has to be an array';\n    }\n    if (typeof watchVariable !== 'string') {\n        throw 'The BlockList watchVariable has to be a string';\n    }\n};\n","import { validateBlockListParams } from '../validateBlockListParams/validateBlockListParams';\nconst isBlockListDisabled = (options) => {\n    return !options.list?.length || !options.watchVariable;\n};\nconst getValue = (data, name) => {\n    return data instanceof FormData ? data.get(name) : data[name];\n};\nexport const isBlockedValueInParams = (options, params) => {\n    if (isBlockListDisabled(options))\n        return false;\n    validateBlockListParams(options.list, options.watchVariable);\n    const value = getValue(params, options.watchVariable);\n    if (typeof value !== 'string')\n        return false;\n    return options.list.includes(value);\n};\n","import { EmailJSResponseStatus } from '../../models/EmailJSResponseStatus';\nexport const blockedEmailError = () => {\n    return new EmailJSResponseStatus(403, 'Forbidden');\n};\n","export const validateLimitRateParams = (throttle, id) => {\n    if (typeof throttle !== 'number' || throttle < 0) {\n        throw 'The LimitRate throttle has to be a positive number';\n    }\n    if (id && typeof id !== 'string') {\n        throw 'The LimitRate ID has to be a non-empty string';\n    }\n};\n","import { validateLimitRateParams } from '../validateLimitRateParams/validateLimitRateParams';\nconst getLeftTime = async (id, throttle, storage) => {\n    const lastTime = Number((await storage.get(id)) || 0);\n    return throttle - Date.now() + lastTime;\n};\nexport const isLimitRateHit = async (defaultID, options, storage) => {\n    if (!options.throttle || !storage) {\n        return false;\n    }\n    validateLimitRateParams(options.throttle, options.id);\n    const id = options.id || defaultID;\n    const leftTime = await getLeftTime(id, options.throttle, storage);\n    if (leftTime > 0) {\n        return true;\n    }\n    await storage.set(id, Date.now().toString());\n    return false;\n};\n","import { EmailJSResponseStatus } from '../../models/EmailJSResponseStatus';\nexport const limitRateError = () => {\n    return new EmailJSResponseStatus(429, 'Too Many Requests');\n};\n","export const validateForm = (form) => {\n    if (!form || form.nodeName !== 'FORM') {\n        throw 'The 3rd parameter is expected to be the HTML form element or the style selector of the form';\n    }\n};\n","import { EmailJSResponseStatus } from './models/EmailJSResponseStatus';\nimport { init } from './methods/init/init';\nimport { send } from './methods/send/send';\nimport { sendForm } from './methods/sendForm/sendForm';\nexport { init, send, sendForm, EmailJSResponseStatus };\nexport default {\n    init,\n    send,\n    sendForm,\n    EmailJSResponseStatus,\n};\n","import { store } from '../../store/store';\nimport { buildOptions } from '../../utils/buildOptions/buildOptions';\n/**\n * EmailJS global SDK config\n * @param {object} options - the EmailJS global SDK config options\n * @param {string} origin - the non-default EmailJS origin\n */\nexport const init = (options, origin = 'https://api.emailjs.com') => {\n    if (!options)\n        return;\n    const opts = buildOptions(options);\n    store.publicKey = opts.publicKey;\n    store.blockHeadless = opts.blockHeadless;\n    store.storageProvider = opts.storageProvider;\n    store.blockList = opts.blockList;\n    store.limitRate = opts.limitRate;\n    store.origin = opts.origin || origin;\n};\n","import { store } from '../../store/store';\nimport { sendPost } from '../../api/sendPost';\nimport { buildOptions } from '../../utils/buildOptions/buildOptions';\nimport { validateParams } from '../../utils/validateParams/validateParams';\nimport { validateTemplateParams } from '../../utils/validateTemplateParams/validateTemplateParams';\nimport { isHeadless } from '../../utils/isHeadless/isHeadless';\nimport { headlessError } from '../../errors/headlessError/headlessError';\nimport { isBlockedValueInParams } from '../../utils/isBlockedValueInParams/isBlockedValueInParams';\nimport { blockedEmailError } from '../../errors/blockedEmailError/blockedEmailError';\nimport { isLimitRateHit } from '../../utils/isLimitRateHit/isLimitRateHit';\nimport { limitRateError } from '../../errors/limitRateError/limitRateError';\n/**\n * Send a template to the specific EmailJS service\n * @param {string} serviceID - the EmailJS service ID\n * @param {string} templateID - the EmailJS template ID\n * @param {object} templateParams - the template params, what will be set to the EmailJS template\n * @param {object} options - the EmailJS SDK config options\n * @returns {Promise<EmailJSResponseStatus>}\n */\nexport const send = async (serviceID, templateID, templateParams, options) => {\n    const opts = buildOptions(options);\n    const publicKey = opts.publicKey || store.publicKey;\n    const blockHeadless = opts.blockHeadless || store.blockHeadless;\n    const storageProvider = opts.storageProvider || store.storageProvider;\n    const blockList = { ...store.blockList, ...opts.blockList };\n    const limitRate = { ...store.limitRate, ...opts.limitRate };\n    if (blockHeadless && isHeadless(navigator)) {\n        return Promise.reject(headlessError());\n    }\n    validateParams(publicKey, serviceID, templateID);\n    validateTemplateParams(templateParams);\n    if (templateParams && isBlockedValueInParams(blockList, templateParams)) {\n        return Promise.reject(blockedEmailError());\n    }\n    if (await isLimitRateHit(location.pathname, limitRate, storageProvider)) {\n        return Promise.reject(limitRateError());\n    }\n    const params = {\n        lib_version: '4.4.1',\n        user_id: publicKey,\n        service_id: serviceID,\n        template_id: templateID,\n        template_params: templateParams,\n    };\n    return sendPost('/api/v1.0/email/send', JSON.stringify(params), {\n        'Content-type': 'application/json',\n    });\n};\n","import { store } from '../../store/store';\nimport { sendPost } from '../../api/sendPost';\nimport { buildOptions } from '../../utils/buildOptions/buildOptions';\nimport { validateForm } from '../../utils/validateForm/validateForm';\nimport { validateParams } from '../../utils/validateParams/validateParams';\nimport { isHeadless } from '../../utils/isHeadless/isHeadless';\nimport { headlessError } from '../../errors/headlessError/headlessError';\nimport { isBlockedValueInParams } from '../../utils/isBlockedValueInParams/isBlockedValueInParams';\nimport { blockedEmailError } from '../../errors/blockedEmailError/blockedEmailError';\nimport { isLimitRateHit } from '../../utils/isLimitRateHit/isLimitRateHit';\nimport { limitRateError } from '../../errors/limitRateError/limitRateError';\nconst findHTMLForm = (form) => {\n    return typeof form === 'string' ? document.querySelector(form) : form;\n};\n/**\n * Send a form the specific EmailJS service\n * @param {string} serviceID - the EmailJS service ID\n * @param {string} templateID - the EmailJS template ID\n * @param {string | HTMLFormElement} form - the form element or selector\n * @param {object} options - the EmailJS SDK config options\n * @returns {Promise<EmailJSResponseStatus>}\n */\nexport const sendForm = async (serviceID, templateID, form, options) => {\n    const opts = buildOptions(options);\n    const publicKey = opts.publicKey || store.publicKey;\n    const blockHeadless = opts.blockHeadless || store.blockHeadless;\n    const storageProvider = store.storageProvider || opts.storageProvider;\n    const blockList = { ...store.blockList, ...opts.blockList };\n    const limitRate = { ...store.limitRate, ...opts.limitRate };\n    if (blockHeadless && isHeadless(navigator)) {\n        return Promise.reject(headlessError());\n    }\n    const currentForm = findHTMLForm(form);\n    validateParams(publicKey, serviceID, templateID);\n    validateForm(currentForm);\n    const formData = new FormData(currentForm);\n    if (isBlockedValueInParams(blockList, formData)) {\n        return Promise.reject(blockedEmailError());\n    }\n    if (await isLimitRateHit(location.pathname, limitRate, storageProvider)) {\n        return Promise.reject(limitRateError());\n    }\n    formData.append('lib_version', '4.4.1');\n    formData.append('service_id', serviceID);\n    formData.append('template_id', templateID);\n    formData.append('user_id', publicKey);\n    return sendPost('/api/v1.0/email/send-form', formData);\n};\n","import emailjs from \"@emailjs/browser\";\r\n\r\n\r\n// gettind Element\r\nconst inputName = document.getElementById('name');\r\nconst inputEmail = document.getElementById(\"email\");\r\nconst inputMessage = document.getElementById(\"message\");\r\nconst submitButton = document.getElementById(\"submitButton\");\r\nconst submitButtonSpan = document.getElementById(\"submitButtonSpan\");\r\nconst submitButtonSpan2 = document.getElementById(\"submitButtonSpan2\");\r\n\r\nlet form = {\r\n    name: \"\",\r\n    email: \"\",\r\n    message: \"\"\r\n}\r\n\r\ninputEmail.addEventListener(\"change\", () => form.email = inputEmail.value);\r\ninputName.addEventListener(\"change\", () => form.name = inputName.value);\r\ninputMessage.addEventListener(\"change\", () => form.message = inputMessage.value)\r\n\r\nconst changeToSending = () => {\r\n    submitButtonSpan.style.display = \"none\";\r\n    submitButtonSpan2.style.display = \"block\";\r\n}\r\n\r\nconst changeToSend = () => {\r\n    submitButtonSpan.style.display = \"block\";\r\n    submitButtonSpan2.style.display = \"none\"\r\n}\r\n\r\nsubmitButton.addEventListener(\"click\", async () => {\r\n    try {\r\n        if (form.email.length > 0 && form.message.length > 0 && form.name.length > 0) {\r\n            changeToSending()\r\n            await emailjs\r\n                .send(\r\n                    \"service_ynbyyjs\",\r\n                    \"template_bg7bsox\",\r\n                    {\r\n                        from_name: form.name,\r\n                        to_name: \"Agu Ogan Success\",\r\n                        from_email: form.email,\r\n                        to_email: \"aguogansuccess@gmail.com\",\r\n                        message: form.message,\r\n                    },\r\n                    \"yK4SoYYQBW1Ts51cf\"\r\n                )\r\n                .then(\r\n                    () => {\r\n                        changeToSend()\r\n                        alert(`Thank you ${form.name}, I will get back to you as soon as possible`);\r\n                        form = {\r\n                            name: \"\",\r\n                            email: \"\",\r\n                            message: \"\",\r\n                        };\r\n                    },\r\n                    (error) => {\r\n                        console.error(error);\r\n                        changeToSend()\r\n                        alert(\"Ahh, something went wrong. Please try again.\");\r\n                    }\r\n                );\r\n        } else {\r\n            alert(\"error: there is no info provided, please make sure all the fields required are not blank\")\r\n        }\r\n    } catch (error) {\r\n        console.log(error)\r\n        changeToSend()\r\n    }\r\n})\r\n\r\n\r\n\r\n"],"names":["$365480cad2bbacec$export$29b488039e3d4c2d","constructor","_status","_text","this","status","text","$c798475fc5eb7ae4$export$6f57813fe9f31bf9","origin","blockHeadless","storageProvider","localStorage","get","key","Promise","resolve","getItem","set","value","setItem","remove","removeItem","$0b89b563b8ce5c16$export$ecbd7d678ac4909b","options","publicKey","toString","$ec190f1f3b1ae57b$export$4a68059d3a005c64","async","url","data","headers","response","fetch","method","body","message","responseStatus","ok","$90a7819081cf59b4$export$1f3bf48e9edf7d72","serviceID","templateID","$606788fef0a93b78$export$80b670b04253020b","templateParams","$9e97281bc02a549f$export$b509da924d51a9a9","navigator","webdriver","languages","length","$ab7d2fa3f7df0c38$export$a8135c843594e85b","$d4556afef3d17824$export$1727dd877829fee8","list","watchVariable","Array","isArray","$52e7c6c8b64bb1c0$export$c7ab883573eb12a4","params","$52e7c6c8b64bb1c0$var$isBlockListDisabled","name","FormData","includes","$e033b5517693ceb4$export$b30160cec00781e","$f1b4a42f5460eb37$export$88c64f8d5fea404b","throttle","id","$ccb9264e82a8b92f$export$8b7f6a1a004faa27","defaultID","storage","leftTime","lastTime","Number","Date","now","$ccb9264e82a8b92f$var$getLeftTime","$0c0740911a700545$export$29b72785a20a20d9","$fb360b4e9f3d39cc$export$ed692cabb252e59b","form","nodeName","$e8e08de5e84870c6$export$2e2bcd8739ae039","opts","blockList","limitRate","reject","location","pathname","lib_version","user_id","service_id","template_id","template_params","JSON","stringify","currentForm","document","querySelector","$4a4df2b20f870b5d$var$findHTMLForm","formData","append","$b63be9b0371e788c$var$inputName","getElementById","$b63be9b0371e788c$var$inputEmail","$b63be9b0371e788c$var$inputMessage","$b63be9b0371e788c$var$submitButton","$b63be9b0371e788c$var$submitButtonSpan","$b63be9b0371e788c$var$submitButtonSpan2","$b63be9b0371e788c$var$form","email","addEventListener","$b63be9b0371e788c$var$changeToSend","style","display","send","from_name","to_name","from_email","to_email","then","alert","error","console","log"],"version":3,"file":"index.6ad8a436.js.map"}